<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet">

  <title>Bingo Game</title>
  <style>

    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      height: 100vh;
      width: 100%;
      overflow: hidden;
      font-family: Arial, sans-serif;
      background: rgba(0, 66, 57, 0.874);
      display: grid;
      grid-template-columns: 2fr 10fr;
      grid-template-rows: 1fr;
      gap: 10px;
      padding: 5px;
    }

    .sidebar {
      display: grid;
      grid-template-rows: 1fr 3fr;
      grid-template-columns: 1fr;
      gap: 10px;
      padding: 10px;
      background-color: rgba(255, 255, 255, 0.9);
      border-radius: 10px;
      border: 2px solid #eee;
      overflow: hidden;
    }

    .sidebar-logo {
      background: #ffffff;
      border-radius: 20px;
    }

    .sidebar-logo-img {
      width: 100%;
      height: 100%;
      background-image: url('Logo.png');
      background-size: contain;
      background-repeat: no-repeat;
      background-position: center;
    }

    .sidebar-records {
      display: grid;
      grid-template-rows: 1fr 3fr 1fr;
      grid-template-columns: 1fr;
      gap: 5px;
      overflow: hidden;
    }

    .record-title {
      display: flex;
      align-items: center;
      justify-content: center;
      color: #ffffff;
      background: #002d75;
      text-align: center;
      word-break: break-word;
      border-radius: 5px;
      font-size: 1rem;
      padding: 5px;
    }

    .record-table-container {
      border: 10px solid #00098e;
      display: grid;
      grid-template-rows: 1fr 5fr;
      grid-template-columns: 1fr;
      border-radius: 10px;
      overflow: hidden;
    }

    .table-header {
      display: grid;
      grid-template-columns: repeat(5, 1fr);
      grid-template-rows: 1fr;
      background-color: #00098e;
    }

    .table-header div {
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.2rem;
      color: aliceblue;
    }

    .record-grid {
      display: grid;
      grid-template-rows: repeat(5, 1fr);
      grid-template-columns: repeat(5, 1fr);
      background-color: #000;
      border: 2px solid white;
    }

    .record-cell {
      position: relative;
      height: 100%;
      width: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: 1rem;
      font-weight: bold;
      color: #000000;
      background-color: #ffffff;
      box-shadow: inset -2px -2px 4px rgba(0, 0, 0, 0.4),
        inset 2px 2px 6px rgba(255, 255, 255, 0.1);
      text-shadow: 1px 1px 1px black;
    }

    /* Highlighting Classes */
    .record-cell.joker {
      background-color: gold;
      border: 2px solid rgb(9, 70, 0);
      color: rgb(0, 0, 0);
    }

    .record-cell.line-win {
      background-color: rgba(0, 128, 0, 0.401);
      border: 2px solid red;
      color: rgb(0, 0, 0);
    }

    .record-cell.checked {
      background-color: green;
      color: white;
    }

    .input-checker {
      margin-top: 10px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 10px;
    }

    .input-checker input {
      border: 2px solid black;
      box-shadow: 0 2px 10px rgba(0, 123, 255, 0.2);
      font-size: 2rem;
      height: 50px;
      width: 100%;
      text-align: center;
      border-radius: 10px;
    }

    .input-checker button {
      height: 40px;
      width: 80%;
      border-radius: 5px;
      background-color: #00098e;
      border: 5px solid rgba(0, 0, 0, 0.56);
      color: rgb(208, 255, 0);
      font-family: 'Gill Sans', sans-serif;
    }

    /* Main Panel */
    .main-panel {
      display: grid;
      grid-template-rows: 5fr 2fr;
      grid-template-columns: 1fr;
      gap: 10px;
      height: 100%;
      overflow: hidden;
    }

    /* Top Board */
    .top-board {
      position: relative;
      display: grid;
      grid-template-rows: 6fr 1fr;
      grid-template-columns: 1fr;
      gap: 10px;
    }

    .bingo-grid {
      position: relative;
      display: grid;
      grid-template-columns: 1fr 16fr;
      grid-template-rows: 1fr;
      justify-content: center;
      background-color: rgba(255, 255, 255, 0.9);
      border: 2px solid #eee;
      border-radius: 10px;
      gap: 5px;
    }

    .bingo-labels {
      display: grid;
      grid-template-rows: repeat(5, 1fr);
      grid-template-columns: 1fr;
      font-family: 'Arial Black', 'Impact', sans-serif;
      justify-content: center;
      align-items: center;
      gap: 3px;
    }

    .bingo-labels>div {
      position: relative;
      height: 100%;
      width: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: 2.5rem;
      font-weight: bold;
      color: #ffffff;
      background-color: #3c3c3c;
      border: 2px solid #1f1f1f;
      border-radius: 8px;
      box-shadow: inset -2px -2px 4px rgba(0, 0, 0, 0.4),
        inset 2px 2px 6px rgba(255, 255, 255, 0.1);
      text-shadow: 1px 1px 1px black;
    }

    .bingo-labels>div:nth-child(1) {
      background-color: #c00000;
    }

    .bingo-labels>div:nth-child(2) {
      background-color: #f4a300;
    }

    .bingo-labels>div:nth-child(3) {
      background-color: #00b050;
    }

    .bingo-labels>div:nth-child(4) {
      background-color: #00b0f0;
    }

    .bingo-labels>div:nth-child(5) {
      background-color: #7030a0;
    }

    .bingo-numbers {
      display: grid;
      grid-template-rows: repeat(5, 1fr);
      grid-template-columns: repeat(15, 1fr);
      gap: 3px;
    }

    .bingo-cell {
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: 2.5rem;
      font-weight: bold;
      color: #ffffff;
      background-color: #3c3c3c;
      border: 2px solid #1f1f1f;
      border-radius: 8px;
      box-shadow: inset -2px -2px 4px rgba(0, 0, 0, 0.4),
        inset 2px 2px 6px rgba(255, 255, 255, 0.1);
      text-shadow: 1px 1px 1px black;
    }

    /* Button Group */
    .button-group {
      display: flex;
      padding: 5px;
      width: 70%;
      justify-content: space-around;
      gap: 10px;
      background-color: rgba(255, 255, 255, 0.9);
      border: 2px solid #eee;
      border-radius: 5px;
      margin: 0 auto;
      /* Center the button group in its parent */
    }


    .game-btn {
  position: relative;
  flex: 1;
  font: bold 1.3rem 'Comic Sans MS', 'Cooper Black', sans-serif;
  color: white;
  cursor: pointer;
  border: 5px solid white;
  border-radius: 10px;
  transition: all 0.2s ease-in-out;
  animation: bgMove 6s ease infinite;
  box-shadow: inset 0 0 12px rgba(255, 255, 255, 0.5),
    0 6px 0 rgba(0, 0, 0, 0.2),
    0 10px 15px rgba(0, 0, 0, 0.3);
}

/* SHUFFLE */
.shuffle {
  background: linear-gradient(135deg, #00e5ff, #00b0ff, #0288d1);
  border: 4px solid #0277bd;
  transition: background 0.3s ease, transform 0.15s ease;
}
.shuffle:hover {
  background: linear-gradient(135deg, #33f0ff, #33c0ff, #2299dd);
  transform: scale(1.05);
}
.shuffle:active {
  background: linear-gradient(135deg, #00a3cc, #0088bb, #006699);
  transform: scale(0.97);
}

/* START */
.start {
  background: linear-gradient(135deg, #76ff03, #00e676, #1de9b6);
  border: 4px solid #00c853;
  transition: background 0.3s ease, transform 0.15s ease;
}
.start:hover {
  background: linear-gradient(135deg, #98ff38, #35ff9a, #50ddb0);
  transform: scale(1.05);
}
.start:active {
  background: linear-gradient(135deg, #339900, #009e4a, #008c74);
  transform: scale(0.97);
}

/* PAUSE */
.pause {
  background: linear-gradient(135deg, #fff176, #fbc02d, #f57f17);
  border: 4px solid #ff9800;
  transition: background 0.3s ease, transform 0.15s ease;
}
.pause:hover {
  background: linear-gradient(135deg, #fff94a, #ffd643, #f8b34a);
  transform: scale(1.05);
}
.pause:active {
  background: linear-gradient(135deg, #c6a200, #c07f00, #a56200);
  transform: scale(0.97);
}

/* RESET */
.reset {
  background: linear-gradient(135deg, #ff4081, #e91e63, #d50000);
  border: 4px solid #c51162;
  transition: background 0.3s ease, transform 0.15s ease;
}
.reset:hover {
  background: linear-gradient(135deg, #ff5a9b, #ec377a, #c32222);
  transform: scale(1.05);
}
.reset:active {
  background: linear-gradient(135deg, #9b0036, #8b0033, #6a001f);
  transform: scale(0.97);
}


    /* Bottom Display Fix */
    .bottom-display {
      display: grid;
      grid-template-columns: 2fr 1fr 1fr;
      grid-template-rows: 1fr;
      gap: 10px;
      height: 100%;
      overflow: hidden;
    }
    .info-display {
  position: relative;
  background-color: rgba(255, 255, 255, 0.9);
  border: 2px solid #eee;
  border-radius: 10px;
  padding: 1rem; /* Added padding for better spacing */
  display: flex;
  flex-direction: column;
  align-items: center; /* Center horizontally */
  justify-content: center; /* Align to top vertically */
  gap: 0.5rem; /* Space between child elements */
}

.info-display .winner,
.info-display .betbirr {
  font-size:4rem;
  color: #000000;
  font-weight: 900;
  text-align: start;
  text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.5);
  line-height: 1.2;
}

  .logo-area {
      color: #ffd700;
      background-color: rgba(255, 255, 255, 0.9);
      border: 2px solid #eee;
      font-size: 8rem;
      flex: 1;
      font-weight: bold;
      text-align: center;
      border-radius: 10px;
      min-height: 80px;
      /* Ensures visible area even if empty */
      box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.4);
      display: flex;
      align-items: center;
      justify-content: center;
      flex-direction: row;
      text-shadow: 1px 1px 3px black;
      border: 2px solid #eee;
    }
    .called-numbers {
      background-color: rgba(255, 255, 255, 0.9);
      border: 2px solid #eee;
      border-radius: 10px;
      display: flex;
      justify-content: center;
      align-items: center;
      flex-direction: column;
    }

    .called-numbers {
      font-family: 'Courier New', Courier, monospace;
      gap: 5px;
    }

    .callednumbers {
      font-size: 7rem;
      color: rgb(255, 0, 0);
    }

    .called-numbers .small {
      font-size: 2rem;
      color: #000;
    }

    /* Cell highlights */
    .bingo-cell.current {
      background-color: #ff0000;
      color: #ffffff;
      font-weight: bold;
      animation: pulse 1s infinite;
      box-shadow: inset 0 0 10px rgb(255, 255, 255);
    }

    .bingo-cell.highlight {
      background-color: #ddff00;
      color: black;
      box-shadow: inset 0 0 10px rgba(255, 0, 0, 1);
    }

    .win-pattern {
      background-color: limegreen !important;
      animation: blink 1s infinite;
      color: white;
      font-weight: bold;
    }

    @keyframes pulse {
      0% {
        transform: scale(1);
      }

      50% {
        transform: scale(1.2);
      }

      100% {
        transform: scale(1);
      }
    }

    @keyframes blink {
      0% {
        opacity: 1;
      }

      50% {
        opacity: 0.3;
      }

      100% {
        opacity: 1;
      }
    }

    button.disabled-anim {
  opacity: 0.3;               /* more transparent */
  pointer-events: none;       /* no mouse interaction */
  cursor: not-allowed;        /* show "not allowed" cursor */
  filter: grayscale(70%);     /* desaturate color */
  user-select: none;          /* prevent text selection */
  transition: opacity 0.3s ease, filter 0.3s ease;
}

    .line-win {
      background-color: limegreen;
      color: white;
      font-weight: bold;
    } 
    .win-pattern {
      background-color: limegreen !important;
      animation: blink 1s infinite;
      color: white;
      font-weight: bold;
    }
    .record-cell.checked {
      background-color: green;
      color: white;
    }

    .record-cell.joker {
      background-color: gold;
    }

    .record-cell.line-win {
      background-color: rgba(0, 128, 0, 0.401);
      border: 2px solid red;
      color: rgb(0, 0, 0);
    }
    
    #prompt-message {
    position: fixed;
    top: 20px;
    left: 50%;
    transform: translateX(-50%);
    min-width: 200px;
    max-width: 80vw;
    padding: 12px 24px;
    border-radius: 6px;
    font-size: 1rem;
    font-weight: 600;
    color: white;
    background-color: #333;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.3s ease;
    z-index: 10000;
    text-align: center;
  }
  #prompt-message.show {
    opacity: 1;
    pointer-events: auto;
  }
  #prompt-message.success {
    background-color: #28a745; /* green */
  }
  #prompt-message.error {
    background-color: #dc3545; /* red */
  }

  /* Loading overlay style to match settings style */
  #voice-download-overlay {
    position: fixed;
    top: 0; left: 0;
    width: 100%; height: 100%;
    background: rgba(20, 20, 20, 0.85);
    color: #eee;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    display: none;
    align-items: center;
    justify-content: center;
    font-size: 1.8em;
    font-weight: 600;
    z-index: 9999;
    user-select: none;
  }

  #voice-download-overlay .loading-box {
    background: #222;
    padding: 20px 40px;
    border-radius: 10px;
    box-shadow: 0 0 15px #0f0;
    text-align: center;
    letter-spacing: 0.03em;
  }
  </style>
</head>

<body>
  <div class="sidebar">
    <div class="sidebar-logo">
      <div class="sidebar-logo-img"></div>
    </div>
    <div class="sidebar-records">
      <div class="record-title"></div>
      <div class="record-table-container">
        <div class="table-header">
          <div>B</div>
          <div>I</div>
          <div>N</div>
          <div>G</div>
          <div>O</div>
        </div>
        <div class="record-grid"></div>
      </div>
      <div class="input-checker">
        <input type="text" class="cart-input" />
        <button class="cart-submite">Check</button>
        <button id="lock" class="lock">lock</button>
      </div>
    </div>
  </div>

  <div class="main-panel">
    <div class="top-board">
      <div class="bingo-grid">
        <div class="bingo-labels">
          <div>B</div>
          <div>I</div>
          <div>N</div>
          <div>G</div>
          <div>O</div>
        </div>
        <div class="bingo-numbers"></div>
      </div>

      <div class="button-group">
        <button id="shuffle" class="game-btn shuffle">
          <i class="fas fa-random"></i>&nbsp;Shuffle
        </button>
      
        <button id="start" class="game-btn start">
          <i class="fas fa-play"></i>&nbsp;Start
        </button>
      
        <button id="pause" class="game-btn pause">
          <i class="fas fa-pause"></i>&nbsp;Pause
        </button>
      
        <button id="reset" class="game-btn reset">
          <i class="fas fa-rotate-right"></i>&nbsp;Reset
        </button>
      </div>
      

    </div>
    <div class="bottom-display">
      <div class="info-display">
        <h1 class="winner">ደራሽ &nbsp <%= winningamount %>ብር
        </h1>
        <h1 class="betbirr">መደብ &nbsp <%= betbirr %>ብር
        </h1>
      </div>
      <div class="logo-area"></div>
      <div class="called-numbers">
        <span class="callednumbers">--</span>
        <div class="small">ድምር ጥሪ</div> <!-- ✅ FIXED -->
      </div>
      <div id="prompt-message"></div>
    </div>
    <script src="/socket.io/socket.io.js"></script>
    <script>
      const socket = io();
      // === Save server data to localStorage ===
      localStorage.setItem('WinningAmount', '<%= winningamount %>');
      localStorage.setItem('BetBirr', '<%= betbirr %>');
      localStorage.setItem('LineChacker', '<%= linechaker %>');
      localStorage.setItem('TotalBet', '<%= totalbet %>');
      localStorage.setItem('RequiredBalance', '<%= requiredbalance %>');
      localStorage.setItem('VoiceType', '<%= voicetype %>');
      localStorage.setItem('GameSpeed', '<%= gamespeed %>');
      localStorage.setItem('Patterns', '<%- JSON.stringify(patterns) %>');
      localStorage.setItem('SelectedCarts', '<%- JSON.stringify(selectedcarts) %>');
      localStorage.setItem('Cartelas', '<%- JSON.stringify(cartelas) %>');
        const voiceType = localStorage.getItem('VoiceType') || 'Recommended_Black_Male_Voice';
        (function () {
        
          const totalVoices = 75;

          // Create loading overlay div and append to body
          const loadingOverlay = document.createElement('div');
          loadingOverlay.id = 'voice-download-overlay';
          loadingOverlay.innerHTML = `<div class="loading-box">Downloading voices... <span id="voice-progress">0/${totalVoices}</span></div>`;
          document.body.appendChild(loadingOverlay);

          // Prompt message helper: show message and auto-hide after 3s
          function showPrompt(type, message) {
            const promptEl = document.getElementById('prompt-message');
            promptEl.textContent = message;
            promptEl.className = ''; // reset classes
            promptEl.classList.add(type === 'error' ? 'error' : 'success', 'show');

            setTimeout(() => {
              promptEl.classList.remove('show');
            }, 3000);
          }

          // IndexedDB open
          function openVoiceDB() {
            return new Promise((resolve, reject) => {
              const request = indexedDB.open('VoiceDB', 1);
              request.onupgradeneeded = (e) => {
                const db = e.target.result;
                if (!db.objectStoreNames.contains('voices')) {
                  db.createObjectStore('voices', { keyPath: 'id' });
                }
              };
              request.onsuccess = (e) => resolve(e.target.result);
              request.onerror = (e) => reject(e.target.error);
            });
          }

          // Check if voice exists in DB (check only first file)
          async function voiceExistsInDB(voice) {
            try {
              const db = await openVoiceDB();
              return new Promise((resolve) => {
                const tx = db.transaction('voices', 'readonly');
                const store = tx.objectStore('voices');
                const getRequest = store.get(`${voice}_1`);
                getRequest.onsuccess = () => resolve(!!getRequest.result);
                getRequest.onerror = () => resolve(false);
              });
            } catch {
              return false;
            }
          }

          // Save voice file blob to DB
          async function saveVoiceFile(voice, index, blob) {
            const db = await openVoiceDB();
            return new Promise((resolve, reject) => {
              const tx = db.transaction('voices', 'readwrite');
              const store = tx.objectStore('voices');
              store.put({ id: `${voice}_${index}`, voice, index, blob });
              tx.oncomplete = () => resolve();
              tx.onerror = () => reject(tx.error);
            });
          }

          // Download single voice file and save
          async function downloadVoiceFile(voice, index) {
            const url = `/mp3/${voice}/${voice}${index}.mp3`;
            const response = await fetch(url);
            if (!response.ok) throw new Error(`File not found: ${voice}${index}.mp3`);
            const blob = await response.blob();
            await saveVoiceFile(voice, index, blob);
          }

          // Download all voices with progress
          async function downloadAllVoices(voice) {
            loadingOverlay.style.display = 'flex';
            const progressSpan = document.getElementById('voice-progress');

            try {
              for (let i = 1; i <= totalVoices; i++) {
                await downloadVoiceFile(voice, i);
                progressSpan.textContent = `${i}/${totalVoices}`;
              }
              loadingOverlay.style.display = 'none';
              showPrompt('success', '✅ Voice download complete.');
              console.log('✅ Voice download finished.');
              return true;
            } catch (err) {
              console.error('❌ Error during download:', err);
              loadingOverlay.style.display = 'none';
              showPrompt('error', '⚠️ Voice download failed or incomplete.');
              return false;
            }
          }

          // On page load, check voice and download if missing
          window.addEventListener('DOMContentLoaded', async () => {
            try {
              const exists = await voiceExistsInDB(voiceType);
              if (!exists) {
                console.log('🔍 Voice files not found. Starting download...');
                await downloadAllVoices(voiceType);
              } else {
                console.log('📦 Voice files already in IndexedDB.');
                showPrompt('success', 'Voice files are already downloaded.');
              }
            } catch (e) {
              console.error('❌ Error initializing voice DB:', e);
              showPrompt('error', '❌ Voice storage error!');
            }
          });
        })();

      const record_grid = document.querySelector(".record-grid");
      const game_grid = document.querySelector(".bingo-numbers");
      const startBtn = document.getElementById("start");
      const pauseBtn = document.getElementById("pause");
      const shuffleBtn = document.getElementById("shuffle");
      const resetBtn = document.getElementById("reset");
      const cartInput = document.querySelector(".cart-input");
      const cartSubmit = document.querySelector(".cart-submite");
      const lockBtn = document.getElementById("lock");
      const record_title = document.querySelector(".record-title");
      const calledDisplay = document.querySelector(".callednumbers");
      const uncalledDisplay = document.querySelector(".uncallednumbers");
      const logoArea = document.querySelector(".logo-area");


      const gameSpeed = parseFloat(localStorage.getItem('GameSpeed')) || 2;

      const selectedCarts = JSON.parse(localStorage.getItem('SelectedCarts') || '[]');
      const Count = selectedCarts.length;
      record_title.textContent = Count;


      function initRecordGrid() {
          record_grid.innerHTML = "";
          for (let i = 1; i <= 25; i++) {
            const cell = document.createElement("div");
            cell.className = "record-cell";

            // Make the 13th cell (center in 5x5 grid) "FREE"
            if (i === 13) {
              cell.textContent = "free";
            } else {
              cell.textContent = "O";
            }

            record_grid.appendChild(cell);
          }
        }


      function initBingoGrid() {
        game_grid.innerHTML = "";
        for (let i = 1; i <= 75; i++) {
          const cell = document.createElement("div");
          cell.id = i;
          cell.className = "bingo-cell";
          cell.textContent = i;
          game_grid.appendChild(cell);
        }
      }

      function openDB() {
        return new Promise((resolve, reject) => {
          const request = indexedDB.open("VoiceDB", 1);
          request.onerror = () => reject("Error opening IndexedDB");
          request.onsuccess = (event) => {
            const db = event.target.result;
            if (!db.objectStoreNames.contains("voices")) {
              reject("Object store 'voices' not found");
              return;
            }
            resolve(db);
          };
          request.onupgradeneeded = (event) => {
            const db = event.target.result;
            if (!db.objectStoreNames.contains("voices")) {
              db.createObjectStore("voices", { keyPath: "id" });
            }
          };
        });
      }

      function getVoiceBlob(db, number) {
        return new Promise((resolve, reject) => {
          const key = `${voiceType}_${number}`;
          const tx = db.transaction("voices", "readonly");
          const store = tx.objectStore("voices");
          const request = store.get(key);
          request.onsuccess = () => {
            const result = request.result;
            result?.blob ? resolve(result.blob) : reject(`Voice not found for ${key}`);
          };
          request.onerror = () => reject("Error fetching from IndexedDB");
        });
      }

let gameStarted = false;
let hasStarted = false;
let isPaused = false;
let intervalActive = false;
let intervalId = null;
let shuffleUsed = false;
let index = 0;
let numbers = [];
let currentIndex = 0;

const calledNumbers = new Set();
let cachedNumbers = [];
const errorQueue = [];
let isShowingError = false;

function playVoiceFromBlob(blob, number) {
  const audioURL = URL.createObjectURL(blob);
  const audio = new Audio(audioURL);

  audio.onplaying = () => {
    const prefix = number <= 15 ? "B" :
      number <= 30 ? "I" :
        number <= 45 ? "N" :
          number <= 60 ? "G" : "O";
    if (logoArea) {
      logoArea.textContent = `${prefix} ${number}`;
    }
    console.log(`🔊 Playing voice for number: ${prefix} ${number}`);
  };

  audio.onended = () => URL.revokeObjectURL(audioURL);
  audio.play().catch(err => console.error("Audio error:", err));
}

function highlightNumber(number) {
  document.querySelectorAll(".bingo-cell.current").forEach(cell => {
    cell.classList.remove("current");
    cell.classList.add("highlight");
  });

  const currentCell = document.getElementById(number);
  if (currentCell) {
    currentCell.classList.add("current");
  }

  updateCalledUncalledCount();
}

function updateCalledUncalledCount() {
  const called = document.querySelectorAll(".bingo-cell.highlight, .bingo-cell.current").length;
  calledDisplay.textContent = called;
}

function setGameState(started, paused, active) {
  hasStarted = started;
  isPaused = paused;
  gameStarted = started;
  intervalActive = active;
  updateButtons();
}

function updateButtons() {
  startBtn.disabled = hasStarted && !isPaused;
  pauseBtn.disabled = !hasStarted || isPaused;
  resetBtn.disabled = !hasStarted || !isPaused;
  cartSubmit.disabled = !hasStarted || !isPaused;
  shuffleBtn.disabled = shuffleUsed || hasStarted;
  lockBtn.disabled = !hasStarted || !isPaused || !cartInput.value.trim();

  [startBtn, pauseBtn, resetBtn, cartSubmit, shuffleBtn, lockBtn].forEach(btn => {
    btn.classList.toggle("disabled-anim", btn.disabled);
  });
}

// 🔁 Global error handling
socket.on("errorMsg", (msg) => {
  errorQueue.push(msg);
  showNextError();
});

function showNextError() {
  if (isShowingError || errorQueue.length === 0) return;
  isShowingError = true;
  const msg = errorQueue.shift();
  alert(`⚠️ ${msg}`);
  setTimeout(() => {
    isShowingError = false;
    showNextError();
  }, 500);
}

// 🔌 Reconnect logic
socket.on("disconnect", () => {
  console.warn("🚫 Disconnected from server.");
  gameStarted = false;
});

socket.on("connect", () => {
  console.log("🔁 Reconnected to server.");
  setTimeout(() => {
    if (!gameStarted && cachedNumbers.length > 0) {
      console.log("♻️ Using cached numbers after reconnect:", cachedNumbers);
      numbers = cachedNumbers;
      gameStarted = true;
      startLoggingNumbers();
    }
  }, 1000);
});

// === LOGGING NUMBERS ===
async function startLoggingNumbers(fromIndex = 0) {
  if (!numbers || numbers.length === 0) {
    if (cachedNumbers.length > 0) {
      numbers = [...cachedNumbers];
      console.log("🔁 Loaded cached numbers:", numbers);
    } else {
      console.error("❌ No numbers available to start the game.");
      return;
    }
  }

  index = fromIndex;
  clearInterval(intervalId);
  isPaused = false;
  setGameState(true, false, true);

  let db;
  try {
    db = await openDB();
  } catch (err) {
    console.error("IndexedDB open failed:", err);
    return;
  }

  // Skip already-called numbers
  while (index < numbers.length && calledNumbers.has(numbers[index])) {
    index++;
  }

  if (index >= numbers.length) {
    console.warn("All numbers already called.");
    return;
  }

  const playNextNumber = async () => {
    while (index < numbers.length && calledNumbers.has(numbers[index])) {
      index++;
    }

    if (isPaused || index >= numbers.length) {
      clearInterval(intervalId);
      setGameState(true, true, false);
      gameStarted = false;
      console.log("⏹️ Game paused or finished.");
      return;
    }

    const number = numbers[index];
    console.log(`🎯 Calling number: ${number}`);
    highlightNumber(number);

    try {
      const blob = await getVoiceBlob(db, number);
      playVoiceFromBlob(blob, number);
    } catch (err) {
      console.error("Voice error:", err);
    }

    calledNumbers.add(number);
    index++;
  };

  // Delay first number by 2 seconds
  console.log("⏳ Waiting 2 seconds before calling the first number...");
  setTimeout(() => {
    playNextNumber();
    intervalId = setInterval(playNextNumber, gameSpeed * 1000);
  }, 1000);
}

// 🎮 START BUTTON
startBtn.addEventListener("click", () => {
  if (!hasStarted || isPaused) {
    cartSubmit.disabled = true;
    lockBtn.disabled = true;
    startBtn.disabled = true;

    if (cachedNumbers.length > 0) {
      console.log("✅ Starting game with cached numbers...");
      cartSubmit.disabled = false;
      lockBtn.disabled = false;
      lockBtn.classList.remove("disabled-anim");
      cartInput.value = "";
      initRecordGrid();
      record_title.textContent = " የ ተጫዋች ካርተላ መፈተሻ እና ዉጤት ማሳያ ቦታ ";
      numbers = [...cachedNumbers];
      setGameState(true, false, true);
      startLoggingNumbers();
      return;
    }

    console.log("📡 Requesting new numbers from server...");
    const handleNumbers = (data) => {
      if (!Array.isArray(data)) return;
      playSound.play().catch(() => { });
      socket.off("displayNumbers", handleNumbers);
      socket.off("errorMsg", handleError);

      numbers = [...data];
      cachedNumbers = [...data];
      hasStarted = true;
      gameStarted = true;

      cartSubmit.disabled = false;
      lockBtn.disabled = false;
      lockBtn.classList.remove("disabled-anim");
      cartInput.value = "";
      initRecordGrid();
      record_title.textContent = " የ ተጫዋች ካርተላ መፈተሻ እና ዉጤት ማሳያ ቦታ ";

      console.log("✅ Received numbers from server:", numbers);
      setGameState(true, false, true);
      startLoggingNumbers();
    };

    const handleError = (msg) => {
      socket.off("displayNumbers", handleNumbers);
      socket.off("errorMsg", handleError);
      alert(`⚠️ ${msg}`);
      startBtn.disabled = false;
    };

    socket.once("displayNumbers", handleNumbers);
    socket.once("errorMsg", handleError);
    socket.emit("sendNumbers");
  }
});

// INIT UI
initRecordGrid();
initBingoGrid();
updateCalledUncalledCount();

cartSubmit.disabled = true;
lockBtn.disabled = true;
lockBtn.classList.add("disabled-anim");
cartSubmit.classList.add("disabled-anim");
pauseBtn.classList.add("disabled-anim");
resetBtn.classList.add("disabled-anim");

function handlePauseTrigger() {
  if (hasStarted && !isPaused) {
    pauseSound.play().catch(() => { });
    console.log("⏸️ Game paused by user input.");
    setGameState(true, true, false);
  }
  cartInput.focus();
}

// Pause triggers
pauseBtn.addEventListener("click", handlePauseTrigger);
document.addEventListener("keydown", handlePauseTrigger);
document.addEventListener("mousedown", (e) => {
  if (e.button === 0 || e.button === 2) {
    handlePauseTrigger();
  }
});

// Reset
resetBtn.addEventListener("click", () => {
  console.log("🔄 Resetting game.");
  window.location.href = "/home";
});

// Shuffle
shuffleBtn.addEventListener("click", () => {
  if (!shuffleUsed && !hasStarted) {
    shuffleSound.play();
    shuffleUsed = true;
    document.body.classList.add("shake");
    setTimeout(() => document.body.classList.remove("shake"), 1000);
    updateButtons();
    console.log("🔀 Shuffle used.");
  }
});


      let lockedCartelas = [];

      lockBtn.addEventListener("click", () => {
        if (gameStarted) {
          record_title.textContent = "❌ ጨዋታው ገና አልጀመረም !";
          return;
        }

        const value = cartInput.value.trim();
        const cartNumber = parseInt(value, 10);
        if (isNaN(cartNumber)) {
          record_title.textContent = "❌ ለመፍታትም ሆነ ለመቆለፍ ያልተሳሳተ የካርተላ ቁጥር ያስገቡ";
          return;
        }

        const isLocked = lockedCartelas.includes(cartNumber);
        lockBtn.textContent = "Lock";
        if (isLocked) {
          // 🔓 Unlock
          lockedCartelas = lockedCartelas.filter(n => n !== cartNumber);
          record_title.textContent = `🔓 ካርቴላ ቁጥር ${cartNumber} ተከፍቷል`;
          initRecordGrid();
          evaluateWin(cells, lineChecker, cartNumber);
          lockBtn.textContent = "Lock";
        } else {
          // 🔒 Lock
          lockedCartelas.push(cartNumber);
          record_title.textContent = `🔒 ካርቴላ ቁጥር ${cartNumber} ተቆልፏል`;
          initRecordGrid();
          const allCells = record_grid.querySelectorAll(".record-cell");
          allCells.forEach(cell => {
            cell.textContent = "O";
            cell.classList.remove("checked", "joker");
          });
          lockBtn.textContent = "Unlock";
        }

        lockBtn.classList.remove("disabled-anim");
      });

      const Patterns = localStorage.getItem('Patterns') || '["h", "v", "d", "sc", "lc"]';

      function handleCartSubmit() {
        initRecordGrid();

        if (!gameStarted && numbers.length === 0) {
          record_title.textContent = "❌ ጨዋታው ገና አልተጀመረም !";
          return;
        }

        const cartNumber = parseInt(cartInput.value.trim(), 10);
        if (isNaN(cartNumber) || cartNumber < 1 || cartNumber > 150) {
          record_title.textContent = "❌ ከካርቴላ ቁጥር ከ (1-150) ዉጪ ሲስተሞ ላይ አልተመዘገበም !";
          return;
        }

        const cartelas = JSON.parse(localStorage.getItem("Cartelas") || "[]");
        const cartela = cartelas.find(c => c.cart_number === cartNumber);

        if (!cartela || !cartela.grid) {
          record_title.textContent = `❌ ካርቴላ ቁጥር ${cartNumber} አልተመዘገበም።`;
          return;
        }

        // Use the global lockedCartelas array here
        const isLocked = lockedCartelas.includes(cartNumber);
        window.lastChakeTime = new Date().toISOString();

        if (isLocked) {
          record_title.textContent = `🔒 ካርቴላ ቁጥር ${cartNumber} ተቆልፏል.`;
          lockBtn.textContent = "Unlock";
          lockBtn.disabled = false;
          lockBtn.classList.remove("disabled-anim");
          return;
        }

        // Populate record grid with cartela values
        const grid = cartela.grid;
        const highlightedCells = Array.from(document.querySelectorAll(".bingo-cell.highlight, .bingo-cell.current"))
          .map(cell => cell.textContent.trim())
          .filter(text => text !== "");

        record_grid.innerHTML = "";
        grid.flat().forEach(value => {
          const cell = document.createElement("div");
          cell.className = "record-cell";
          cell.textContent = value;
          if (value === "free") {
            cell.classList.add("joker");
          }
          if (value !== "free" && highlightedCells.includes(String(value))) {
            cell.classList.add("checked");
          }
          record_grid.appendChild(cell);
        });

        if (!checkedCartNumbers.includes(cartNumber)) {
          checkedCartNumbers.push(cartNumber);
          localStorage.setItem("checkedCartNumbers", JSON.stringify(checkedCartNumbers));
        }

        const lineChecker = parseInt(localStorage.getItem("LineChacker") || "1", 10);
        const cellNodes = Array.from(record_grid.children);
        evaluateWin(cellNodes, lineChecker, cartNumber);

        lockBtn.textContent = "Lock";
        lockBtn.disabled = false;
        lockBtn.classList.remove("disabled-anim");
      }


      cartSubmit.addEventListener("click", handleCartSubmit);
      cartInput.addEventListener("keydown", (event) => {
        if (event.key === "Enter") {
          handleCartSubmit();
          cartInput.value = "";
        }
      });

      let checkedCartNumbers = JSON.parse(localStorage.getItem("checkedCartNumbers") || "[]");

      function evaluateWin(cells, lineChecker, cartNumber) {
        const size = 5;
        let winCount = 0;
        let lastNumberMatched = false;
        let luckyPassed = false;


        function isCellChecked(row, col) {
          const index = row * size + col;
          const cell = cells[index];
          return cell && (cell.classList.contains("checked") || cell.classList.contains("joker"));
        }

        function getCell(row, col) {
          return cells[row * size + col];
        }

        const logoText = logoArea.textContent.trim();
        const lastCalledNumber = parseInt(logoText.split(" ")[1], 10);
        const patterns = JSON.parse(localStorage.getItem("Patterns") || '["h", "v", "d", "sc", "lc"]');

        cells.forEach(cell => cell.classList.remove("line-win"));
        const lines = [];

        // Horizontal lines
        if (patterns.includes("h")) {
          for (let row = 0; row < size; row++) {
            const line = [0, 1, 2, 3, 4].map(col => getCell(row, col));
            if (line.every((_, i) => isCellChecked(row, i))) {
              lines.push(line);
            }
          }
        }

        // Vertical lines
        if (patterns.includes("v")) {
          for (let col = 0; col < size; col++) {
            const line = [0, 1, 2, 3, 4].map(row => getCell(row, col));
            if (line.every((_, i) => isCellChecked(i, col))) {
              lines.push(line);
            }
          }
        }

        // Diagonal lines (d)
        if (patterns.includes("d")) {
          const diag1 = [0, 1, 2, 3, 4].map(i => getCell(i, i));
          if (diag1.every((_, i) => isCellChecked(i, i))) lines.push(diag1);

          const diag2 = [0, 1, 2, 3, 4].map(i => getCell(i, size - 1 - i));
          if (diag2.every((_, i) => isCellChecked(i, size - 1 - i))) lines.push(diag2);
        }

        // Small corners (sc)
        if (patterns.includes("sc")) {
          const scCells = [
            getCell(1, 1),
            getCell(1, 3),
            getCell(3, 1),
            getCell(3, 3),
          ];
          if (scCells.every(cell => cell && (cell.classList.contains("checked") || cell.classList.contains("joker")))) {
            lines.push(scCells);
          }
        }

        // Large corners (lc)
        if (patterns.includes("lc")) {
          const lcCells = [
            getCell(0, 0),
            getCell(0, 4),
            getCell(4, 0),
            getCell(4, 4),
          ];
          if (lcCells.every(cell => cell && (cell.classList.contains("checked") || cell.classList.contains("joker")))) {
            lines.push(lcCells);
          }
        }

        const uniqueMatched = new Set();
        lines.forEach(line => {
          let lineContainsLast = false;
          line.forEach(cell => {
            if (cell.textContent === String(lastCalledNumber)) lineContainsLast = true;
            uniqueMatched.add(cell);
          });

          winCount++;
          if (lineContainsLast) lastNumberMatched = true;
          line.forEach(cell => cell.classList.add("line-win"));
        });

        let winner = false;

        if (winCount >= lineChecker && lastNumberMatched) {
          record_title.textContent = `🎉 ካርቴላ ቁጥር ${cartNumber} አሸንፏል ✅`;
          winner = true;
          luckyPassed = false;
          winnerSound.play(); // Play winner sound
        } else if (winCount >= lineChecker && !lastNumberMatched) {
          record_title.textContent = `❌ ካርቴላ ቁጥር ${cartNumber} እድሉ አልፏል`;
          winner = false;
          luckyPassed = true
          loserSound.play(); // Play loser sound
        } else {
          record_title.textContent = `❌ ካርቴላ ${cartNumber} አላሸነፈም `;
          winner = false;
          luckyPassed = false
          loserSound.play(); // Play loser sound
        }

        socket.emit("chake", {
          cart: String(cartNumber),
          winner: winner,
          luckyPassed: luckyPassed
        });
      }


      // Declare variables to hold audio files
      let loserSound, winnerSound, playSound, shuffleSound, pauseSound;

      // Function to preload audio files
      function preloadAudio() {
        loserSound = new Audio('/buzz.mp3');
        winnerSound = new Audio('/winner.mp3');
        playSound = new Audio('/play.mp3');
        shuffleSound = new Audio('/shuffle.mp3');
        pauseSound = new Audio('/puase.mp3');

        // Preload them
        [loserSound, winnerSound, playSound, shuffleSound, pauseSound].forEach(audio => audio.load());
      }

      // Call the preload function on page load
      window.addEventListener('DOMContentLoaded', () => {
        preloadAudio();
      });


    </script>


</body>

</html>