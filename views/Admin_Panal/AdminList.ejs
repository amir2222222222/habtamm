<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Admin Management</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap"
        rel="stylesheet">
    <style>
        :root {
            --primary: #4361ee;
            --primary-light: #5a75f1;
            --primary-dark: #3a56e8;
            --danger: #ef233c;
            --danger-light: #f8354e;
            --success: #2ecc71;
            --success-light: #42e487;
            --warning: #f4a261;
            --warning-light: #f7b078;
            --light: #f8f9fa;
            --light-gray: #eceff1;
            --dark: #212529;
            --dark-gray: #343a40;
            --text: #495057;
            --text-light: #6c757d;
            --border: #dee2e6;
            --active: #2ecc71;
            --suspended: #f4a261;
            --none: #6c757d;
            --card-shadow: 0 10px 30px -15px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            --icon-color: #4361ee;
        }

        body {
            font-family: 'Poppins', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            margin: 0;
            display: flex;
            flex-direction: column;
            align-items: center;
            color: var(--text);
            padding-top: 4rem;
            min-height: 100vh;
        }

        .container {
            width: 90%;
            max-width: 1200px;
            margin: 30px auto;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .admin-list-container {
            background: rgba(255, 255, 255, 0.95);
            padding: 30px 40px;
            border-radius: 18px;
            box-shadow: var(--card-shadow);
            width: 100%;
            backdrop-filter: blur(8px);
            border: 1px solid rgba(255, 255, 255, 0.3);
        }

        .admin-header {
            font-size: 28px;
            font-weight: 600;
            margin-bottom: 30px;
            text-align: center;
            color: var(--dark);
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 12px;
            position: relative;
            padding-bottom: 15px;
        }

        .admin-header::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 50%;
            transform: translateX(-50%);
            width: 80px;
            height: 4px;
            background: linear-gradient(to right, var(--primary), var(--success));
            border-radius: 2px;
        }

        .admin-header i {
            color: var(--primary);
            font-size: 32px;
        }

        .admin-card {
            background: #ffffff;
            border-radius: 14px;
            padding: 25px;
            margin-bottom: 25px;
            box-shadow: var(--card-shadow);
            transition: var(--transition);
            border-left: 5px solid var(--primary);
            position: relative;
            overflow: hidden;
        }

        .admin-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, rgba(67, 97, 238, 0.03) 0%, rgba(46, 204, 113, 0.03) 100%);
            z-index: 0;
        }

        .admin-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 35px -10px rgba(0, 0, 0, 0.15);
        }

        .admin-info {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
            gap: 20px;
            position: relative;
            z-index: 1;
        }

        .admin-info-item {
            display: flex;
            flex-direction: column;
        }

        .admin-info-label {
            font-weight: 500;
            color: var(--text-light);
            margin-bottom: 8px;
            font-size: 13px;
            letter-spacing: 0.5px;
            text-transform: uppercase;
            display: flex;
            align-items: center;
            gap: 6px;
        }

        .admin-info-label i {
            font-size: 14px;
            color: var(--icon-color);
        }

        .admin-info-value {
            color: var(--dark);
            font-weight: 500;
            word-break: break-word;
            font-size: 16px;
        }

        .state-badge {
            padding: 6px 12px;
            border-radius: 50px;
            font-size: 13px;
            font-weight: 600;
            text-transform: capitalize;
            display: inline-flex;
            align-items: center;
            gap: 6px;
            letter-spacing: 0.5px;
        }

        .state-badge i {
            font-size: 12px;
        }

        .state-badge.active {
            background-color: rgba(46, 204, 113, 0.15);
            color: var(--active);
        }

        .state-badge.suspended {
            background-color: rgba(244, 162, 97, 0.15);
            color: var(--suspended);
        }

        .state-badge.none {
            background-color: rgba(108, 117, 125, 0.15);
            color: var(--none);
        }

        .admin-actions {
            display: flex;
            justify-content: flex-end;
            gap: 15px;
            margin-top: 20px;
            padding-top: 20px;
            border-top: 1px dashed var(--border);
            position: relative;
            z-index: 1;
        }

        .admin-actions button {
            padding: 10px 18px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            color: white;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: var(--transition);
            font-size: 14px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
        }

        .admin-actions button i {
            font-size: 14px;
        }

        .admin-actions .delete-btn {
            background: var(--danger);
            box-shadow: 0 4px 12px rgba(239, 35, 60, 0.2);
        }

        .admin-actions .delete-btn:hover {
            background: var(--danger-light);
            transform: translateY(-2px);
            box-shadow: 0 6px 15px rgba(239, 35, 60, 0.3);
        }

        .admin-actions .edit-btn {
            background: var(--primary);
            box-shadow: 0 4px 12px rgba(67, 97, 238, 0.2);
        }

        .admin-actions .edit-btn:hover {
            background: var(--primary-light);
            transform: translateY(-2px);
            box-shadow: 0 6px 15px rgba(67, 97, 238, 0.3);
        }

        .admin-actions .state-btn {
            background: var(--warning);
            box-shadow: 0 4px 12px rgba(244, 162, 97, 0.2);
        }

        .admin-actions .state-btn:hover {
            background: var(--warning-light);
            transform: translateY(-2px);
            box-shadow: 0 6px 15px rgba(244, 162, 97, 0.3);
        }

        .update-form {
            display: none;
            margin-top: 25px;
            padding: 25px;
            border-radius: 12px;
            background: rgba(255, 255, 255, 0.7);
            box-shadow: inset 0 0 15px rgba(0, 0, 0, 0.05);
            border: 1px solid rgba(0, 0, 0, 0.08);
            backdrop-filter: blur(5px);
            position: relative;
            z-index: 1;
        }

        .update-form.active {
            display: block;
            animation: fadeIn 0.4s cubic-bezier(0.22, 1, 0.36, 1);
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(-15px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .form-row {
            display: flex;
            flex-direction: column;
            gap: 18px;
        }

        .form-group {
            display: flex;
            align-items: flex-end;
            gap: 12px;
            width: 100%;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: var(--dark-gray);
            font-size: 14px;
            width: 100px;
            flex-shrink: 0;
        }

        .input-wrapper {
            flex-grow: 1;
            display: flex;
            gap: 12px;
        }

        .password-wrapper {
            position: relative;
            flex-grow: 1;
        }

        .password-wrapper .form-control {
            padding-right: 40px;
            width: 100%;
        }

        .toggle-password {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            background: none;
            border: none;
            color: var(--text-light);
            cursor: pointer;
            padding: 5px;
        }

        .toggle-password:hover {
            color: var(--primary);
        }

        .form-control {
            flex-grow: 1;
            padding: 12px 15px;
            border-radius: 8px;
            border: 1px solid var(--border);
            font-size: 15px;
            transition: var(--transition);
            background-color: rgba(255, 255, 255, 0.9);
            min-width: 0;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.03);
        }

        .form-control:focus {
            outline: none;
            border-color: var(--primary-light);
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.15);
        }

        .save-btn {
            background: var(--success);
            color: white;
            padding: 12px 20px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            transition: var(--transition);
            display: inline-flex;
            align-items: center;
            gap: 8px;
            white-space: nowrap;
            height: 45px;
            box-shadow: 0 4px 12px rgba(46, 204, 113, 0.2);
        }

        .save-btn:hover {
            background: var(--success-light);
            transform: translateY(-2px);
            box-shadow: 0 6px 15px rgba(46, 204, 113, 0.3);
        }

        .save-btn i {
            font-size: 14px;
        }

        .no-admins {
            text-align: center;
            color: var(--text-light);
            padding: 40px;
            font-size: 18px;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 15px;
        }

        .no-admins i {
            font-size: 48px;
            color: var(--primary-light);
            opacity: 0.7;
        }

        .alert {
            position: fixed;
            top: 25px;
            right: 25px;
            padding: 18px 28px;
            border-radius: 10px;
            color: white;
            font-weight: 600;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
            z-index: 1000;
            animation: fadeIn 0.4s cubic-bezier(0.22, 1, 0.36, 1);
            display: flex;
            align-items: center;
            gap: 12px;
            backdrop-filter: blur(5px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .alert i {
            font-size: 20px;
        }

        .alert-success {
            background: rgba(46, 204, 113, 0.9);
        }

        .alert-error {
            background: rgba(239, 35, 60, 0.9);
        }

        /* Modal Styles */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 2000;
            backdrop-filter: blur(3px);
        }

        .modal {
            background: white;
            border-radius: 12px;
            padding: 30px;
            max-width: 450px;
            width: 90%;
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.2);
            animation: modalFadeIn 0.3s ease-out;
        }

        @keyframes modalFadeIn {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .modal-header {
            font-size: 22px;
            font-weight: 600;
            margin-bottom: 20px;
            color: var(--dark);
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .modal-header i {
            color: var(--warning);
            font-size: 24px;
        }

        .modal-body {
            margin-bottom: 25px;
            color: var(--text);
            line-height: 1.5;
        }

        .modal-footer {
            display: flex;
            justify-content: flex-end;
            gap: 15px;
        }

        .modal-btn {
            padding: 10px 20px;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
            border: none;
        }

        .modal-btn-cancel {
            background: var(--light-gray);
            color: var(--text);
        }

        .modal-btn-cancel:hover {
            background: #e0e0e0;
        }

        .modal-btn-confirm {
            background: var(--warning);
            color: white;
        }

        .modal-btn-confirm:hover {
            background: var(--warning-light);
        }

        .currency {
            font-family: Arial, sans-serif;
        }

        @media (max-width: 768px) {
            .admin-list-container {
                padding: 25px;
            }

            .admin-info {
                grid-template-columns: 1fr;
            }

            .admin-actions {
                justify-content: center;
                flex-wrap: wrap;
            }

            .form-group {
                flex-direction: column;
                align-items: flex-start;
            }

            .input-wrapper {
                width: 100%;
                flex-direction: column;
            }

            .save-btn {
                width: 100%;
                justify-content: center;
            }

            .modal-footer {
                flex-direction: column;
            }

            .modal-btn {
                width: 100%;
            }
        }
    </style>
</head>

<body>
    <%- include('../partials/AdminHeader') -%>
        <div class="container">
            <div id="adminListContainer" class="admin-list-container">
                <h2 class="admin-header">
                    <i class="fas fa-user-shield"></i> Admin Management
                </h2>
                <div id="adminList">
                    <% if (admins && admins.length> 0) { %>
                        <% admins.forEach(admin=> { %>
                            <div class="admin-card">
                                <div class="admin-info">
                                    <div class="admin-info-item">
                                        <span class="admin-info-label"><i class="fas fa-user"></i> Name:</span>
                                        <span class="admin-info-value">
                                            <%= admin.name %>
                                        </span>
                                    </div>
                                    <div class="admin-info-item">
                                        <span class="admin-info-label"><i class="fas fa-at"></i> Username:</span>
                                        <span class="admin-info-value">
                                            <%= admin.username %>
                                        </span>
                                    </div>
                                    <div class="admin-info-item">
                                        <span class="admin-info-label"><i class="fas fa-power-off"></i> State:</span>
                                        <span class="admin-info-value">
                                            <span
                                                class="state-badge <%= admin.state ? admin.state.toLowerCase() : 'none' %>">
                                                <i
                                                    class="fas fa-<%= admin.state === 'active' ? 'check-circle' : admin.state === 'suspended' ? 'pause-circle' : 'minus-circle' %>"></i>
                                                <%= admin.state || 'none' %>
                                            </span>
                                        </span>
                                    </div>
                                    <div class="admin-info-item">
                                        <span class="admin-info-label"><i class="far fa-calendar-alt"></i> Created
                                            At:</span>
                                        <span class="admin-info-value">
                                            <%= new Date(admin.createdAt).toLocaleDateString('en-US', {
                                                year: 'numeric' , month: 'long' , day: 'numeric' }) %>
                                        </span>
                                    </div>
                                </div>

                                <div class="admin-actions">
                                    <button class="edit-btn" onclick="toggleUpdateForm('<%= admin.uuid %>')">
                                        <i class="fas fa-edit"></i> Edit
                                    </button>
                                    <button class="state-btn"
                                        onclick="showStateModal('<%= admin.uuid %>', '<%= admin.state %>', '<%= admin.name %>')">
                                        <i class="fas fa-power-off"></i>
                                        <%= admin.state==='active' ? 'Suspend' : 'Activate' %>
                                    </button>
                                    <button class="delete-btn" onclick="deleteAdmin('<%= admin.uuid %>')">
                                        <i class="fas fa-trash-alt"></i> Delete
                                    </button>
                                </div>

                                <div class="update-form" id="updateForm-<%= admin.uuid %>">
                                    <div class="form-row">
                                        <% ['name', 'username'].forEach(field=> { %>
                                            <div class="form-group">
                                                <label for="<%= field %>-<%= admin.uuid %>">
                                                    <i
                                                        class="fas fa-<%= field === 'name' ? 'user' : 'at' %>"></i>
                                                    <%= field.charAt(0).toUpperCase() + field.slice(1) %>
                                                </label>
                                                <div class="input-wrapper">
                                                    <input type="text"
                                                        id="<%= field %>-<%= admin.uuid %>" class="form-control"
                                                        placeholder="Enter <%= field %>" value="<%= admin[field] %>">
                                                    <button class="save-btn"
                                                        onclick="updateAdmin('<%= admin.uuid %>', '<%= field %>')">
                                                        <i class="fas fa-save"></i> Update
                                                    </button>
                                                </div>
                                            </div>
                                            <% }) %>
                                                <div class="form-group">
                                                    <label for="password-<%= admin.uuid %>">
                                                        <i class="fas fa-lock"></i> Password
                                                    </label>
                                                    <div class="input-wrapper">
                                                        <div class="password-wrapper">
                                                            <input type="password" id="password-<%= admin.uuid %>"
                                                                class="form-control" placeholder="Enter new password">
                                                            <button class="toggle-password"
                                                                onclick="togglePasswordVisibility('<%= admin.uuid %>')">
                                                                <i class="fas fa-eye"></i>
                                                            </button>
                                                        </div>
                                                        <button class="save-btn"
                                                            onclick="updateAdmin('<%= admin.uuid %>', 'password')">
                                                            <i class="fas fa-save"></i> Update
                                                        </button>
                                                    </div>
                                                </div>
                                    </div>
                                </div>
                            </div>
                            <% }) %>
                                <% } else { %>
                                    <p class="no-admins"><i class="fas fa-user-slash"></i> No admins found</p>
                                    <% } %>
                </div>
            </div>
        </div>

        <!-- State Confirmation Modal -->
        <div id="stateModal" class="modal-overlay" style="display: none;">
            <div class="modal">
                <div class="modal-header">
                    <i class="fas fa-exclamation-triangle"></i>
                    <span id="modalTitle">Confirm Action</span>
                </div>
                <div class="modal-body" id="modalMessage">
                    Are you sure you want to perform this action?
                </div>
                <div class="modal-footer">
                    <button class="modal-btn modal-btn-cancel" onclick="hideStateModal()">Cancel</button>
                    <button class="modal-btn modal-btn-confirm" id="confirmStateBtn">Confirm</button>
                </div>
            </div>
        </div>

        <script>
            // Toggle update form visibility
            function toggleUpdateForm(uuid) {
                const form = document.getElementById(`updateForm-${uuid}`);
                form.classList.toggle('active');

                // Close other open forms
                document.querySelectorAll('.update-form').forEach(f => {
                    if (f.id !== `updateForm-${uuid}`) {
                        f.classList.remove('active');
                    }
                });
            }

            // Toggle password visibility
            function togglePasswordVisibility(uuid) {
                const passwordInput = document.getElementById(`password-${uuid}`);
                const toggleBtn = passwordInput.nextElementSibling;

                if (passwordInput.type === 'password') {
                    passwordInput.type = 'text';
                    toggleBtn.innerHTML = '<i class="fas fa-eye-slash"></i>';
                } else {
                    passwordInput.type = 'password';
                    toggleBtn.innerHTML = '<i class="fas fa-eye"></i>';
                }
            }

            // Show state confirmation modal
            function showStateModal(uuid, currentState, adminName) {
                const newState = currentState === 'active' ? 'suspended' : 'active';
                const modal = document.getElementById('stateModal');
                const modalTitle = document.getElementById('modalTitle');
                const modalMessage = document.getElementById('modalMessage');
                const confirmBtn = document.getElementById('confirmStateBtn');

                modalTitle.textContent = `${newState === 'active' ? 'Activate' : 'Suspend'} Admin`;
                modalMessage.textContent = `Are you sure you want to ${newState === 'active' ? 'activate' : 'suspend'} admin ${adminName}?`;

                confirmBtn.onclick = function () {
                    toggleAdminState(uuid, currentState);
                    hideStateModal();
                };

                modal.style.display = 'flex';
            }

            // Hide state confirmation modal
            function hideStateModal() {
                document.getElementById('stateModal').style.display = 'none';
            }

            // Toggle admin state between active and suspended
            async function toggleAdminState(uuid, currentState) {
                const newState = currentState === 'active' ? 'suspended' : 'active';

                try {
                    const response = await fetch(`/admin/${uuid}`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ state: newState })
                    });

                    if (response.ok) {
                        showAlert('success', `Admin ${newState === 'active' ? 'activated' : 'suspended'} successfully`);
                        setTimeout(() => location.reload(), 1500);
                    } else {
                        const result = await response.json();
                        showAlert('error', result.message || 'State update failed');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    showAlert('error', 'An error occurred while updating state');
                }
            }

            async function updateAdmin(uuid, field) {
                let value;
                const inputElement = document.getElementById(`${field}-${uuid}`);

                if (inputElement.tagName === 'SELECT') {
                    value = inputElement.value;
                } else {
                    value = inputElement.value.trim();
                }

                if (!value && field !== 'password') {
                    showAlert('error', `Please enter a value for ${field}`);
                    inputElement.focus();
                    return;
                }

                try {
                    const res = await fetch(`/admin/${uuid}`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ [field]: value }),
                    });

                    if (res.ok) {
                        showAlert('success', 'Admin updated successfully');
                        setTimeout(() => location.reload(), 1500);
                    } else {
                        const err = await res.json();
                        showAlert('error', err.error || "Update failed");
                    }
                } catch (error) {
                    showAlert('error', 'Network error. Please try again.');
                }
            }

            async function deleteAdmin(uuid) {
                if (!confirm("Are you sure you want to delete this admin? This action cannot be undone.")) return;

                try {
                    const res = await fetch(`/admin/${uuid}`, { method: 'DELETE' });

                    if (res.ok) {
                        showAlert('success', 'Admin deleted successfully');
                        setTimeout(() => location.reload(), 1500);
                    } else {
                        const err = await res.json();
                        showAlert('error', err.error || "Delete failed");
                    }
                } catch (error) {
                    showAlert('error', 'Network error. Please try again.');
                }
            }

            function showAlert(type, message) {
                // Remove any existing alerts first
                const existingAlert = document.querySelector('.alert');
                if (existingAlert) existingAlert.remove();

                const alertDiv = document.createElement('div');
                alertDiv.className = `alert alert-${type}`;
                alertDiv.innerHTML = `
                    <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle'}"></i>
                    ${message}
                `;

                document.body.appendChild(alertDiv);

                setTimeout(() => {
                    alertDiv.style.animation = 'fadeOut 0.3s ease';
                    setTimeout(() => alertDiv.remove(), 300);
                }, 3000);
            }
        </script>
</body>

</html>